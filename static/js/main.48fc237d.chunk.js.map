{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","className","onSubmit","e","props","addContactHandler","type","name","pattern","title","required","Component","Filter","value","this","filter","onChange","handleChange","ContactListItem","number","deleteHandler","onClick","ContactList","contacts","contact","toLowerCase","includes","trim","map","id","defaultProps","App","state","event","preventDefault","target","elements","find","alert","newContact","uuidv4","setState","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48fc237d.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ContactForm extends Component {\r\n  render() {\r\n    return (\r\n      <form className=\"contact-form\" onSubmit={(e) => this.props.addContactHandler(e)}>\r\n        <div className=\"form-container\">\r\n          <label className=\"form-label\">\r\n            Name\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label className=\"form-label\">\r\n            Number\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className=\"form-submit\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContactHandler: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Filter extends Component {\r\n  render() {\r\n    return (\r\n      <label className=\"filter-label\">\r\n        Find contacts by name:\r\n        <input\r\n          className=\"filter-input\"\r\n          name=\"name\"\r\n          value={this.props.filter}\r\n          onChange={this.props.handleChange}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ContactListItem extends Component {\r\n  render() {\r\n    const { name, number, deleteHandler } = this.props;\r\n\r\n    return (\r\n      <li className=\"contact-list-item\">\r\n        <span className=\"contact-name\">{name}:</span>\r\n        <span className=\"contact-number\"> {number}</span>\r\n        <button className=\"contact-delete-btn\" onClick={deleteHandler}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  deleteHandler: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ContactListItem } from '../ContactListItem';\r\n\r\nexport class ContactList extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"contact-list\">\r\n        {this.props.contacts\r\n          .filter((contact) =>\r\n            contact.name.toLowerCase().includes(this.props.filter.toLowerCase().trim())\r\n          )\r\n          .map((contact) => {\r\n            return (\r\n              <ContactListItem\r\n                key={contact.id}\r\n                name={contact.name}\r\n                number={contact.number}\r\n                deleteHandler={this.props.deleteHandler(contact.id)}\r\n              />\r\n            );\r\n          })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.defaultProps = {\r\n  filter: '',\r\n};\r\n\r\nContactList.propTypes = {\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.scss';\n\nimport { ContactForm } from './components/ContactForm/';\nimport { Filter } from './components/Filter';\nimport { ContactList } from './components/ContactList/';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  addContactHandler = (event) => {\n    event.preventDefault();\n    const { name, number } = event.target.elements;\n    if (this.state.contacts.find((contact) => contact.name === name.value)) {\n      alert(`${name.value} is already in contacts.`);\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name: name.value,\n      number: number.value,\n    };\n\n    this.setState({ contacts: [...this.state.contacts, newContact] });\n  };\n\n  filterHandler = (event) => {\n    this.setState({\n      filter: event.target.value,\n    });\n  };\n\n  deleteHandler = (id) => () => {\n    this.setState({ contacts: this.state.contacts.filter((contact) => contact.id !== id) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm addContactHandler={this.addContactHandler} />\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} handleChange={this.filterHandler} />\n        <ContactList\n          contacts={this.state.contacts}\n          filter={this.state.filter}\n          deleteHandler={this.deleteHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}